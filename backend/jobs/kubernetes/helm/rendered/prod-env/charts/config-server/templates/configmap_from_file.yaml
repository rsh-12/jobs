---
# Source: prod-env/charts/config-server/templates/configmap_from_file.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-server
  labels:
    app.kubernetes.io/name: config-server
    helm.sh/chart: config-server-1.0.0
    app.kubernetes.io/managed-by: Helm
data:
  application.yml: |
    app:
      auth-server: localhost
      config-server: localhost
      http-pattern: "/api/v1/composite"
      scope-companies: "SCOPE_companies"
      scope-vacancies: "SCOPE_vacancies"
      scope-resumes: "SCOPE_resumes"
  
    spring:
      rabbitmq:
        host: 127.0.0.1
        port: 5672
        username: guest
        password: guest
      zipkin:
        sender:
          type: rabbit
      sleuth:
        sampler:
          probability: 1.0 # send all trace to Zipkin
  
  
    spring.cloud.stream.default-binder: rabbit
  
    # WARNING: Exposing all management endpoints over http should only be used during development, must be locked down in production!
    management.endpoint.health.show-details: always
    management.endpoints.web.exposure.include: "*"
  
    # Readiness probes
    management.endpoint.health.probes.enabled: true
    management.endpoint.health.group.readiness.include: rabbit, db
  
    # Graceful shutdown with a wait period
    server.shutdown: "graceful"
    spring.lifecycle.timeout-per-shutdown-phase: "10s"
  
  
    ---
    spring.config.activate.on-profile: docker
  
    spring.rabbitmq.host: rabbitmq
  
    app:
      config-server: config-server
      auth-server: keycloak
  company.yml: |-
    server:
      port: 7001
      error:
        include-message: always
  
    spring:
      datasource:
        url: jdbc:postgresql://localhost/company
        username: ${DB_USERNAME:postgres}
        password: ${DB_PWD:postgres}
        hikari:
          initialization-fail-timeout: 60000
      data:
        web:
          pageable:
            max-page-size: 500
      cloud:
        function:
          definition: companyMessageProcessor;businessStreamMessageProcessor
        stream:
          default-binder: rabbit
          bindings:
            companyMessageProcessor-in-0:
              destination: companies
              group: companiesGroup
              consumer:
                max-attempts: 3
                back-off-initial-interval: 500
                back-off-max-interval: 1000
                back-off-multiplier: 2.0
            businessStreamMessageProcessor-in-0:
              destination: businessStreams
              group: businessStreamsGroup
              consumer:
                max-attempts: 3
                back-off-initial-interval: 500
                back-off-max-interval: 1000
                back-off-multiplier: 2.0
          rabbit:
            bindings:
              companyMessageProcessor-in-0:
                consumer:
                  auto-bind-dlq: true
                  republish-to-dlq: true
              businessStreamMessageProcessor-in-0:
                consumer:
                  auto-bind-dlq: true
                  republish-to-dlq: true
  
    logging:
      level:
        root: info
        ru.rsh12: debug
        org.hibernate.SQL: debug
        org.hibernate.type.descriptor.sql.BasicBinder: trace
  
  
    ---
    spring:
      datasource:
        url: jdbc:postgresql://postgres/company
      config:
        activate:
          on-profile: docker
  
    server:
      port: 80
  composite.yml: |-
    server:
      port: 7000
      error:
        include-message: always
  
    springdoc:
      swagger-ui.path: /openapi/swagger-ui.html
      api-docs.path: /openapi/v3/api-docs
      cache.disabled: true
      packages-to-scan: ru.rsh12
      paths-to-match: /**
  
      swagger-ui:
        oauth2-redirect-url: /swagger-ui/oauth2-redirect.html
        oauth:
          clientId: admins-client
          clientSecret: u86HYlNxFFZ7GzJeTacgTCFYjROuFhZA # temporary secret key
          use-basic-authentication-with-access-code-grant: true
      oAuthFlow:
        authorizationUrl: http://localhost:9999/auth/realms/ugk/protocol/openid-connect/auth
        tokenUrl: http://localhost:9999/auth/realms/ugk/protocol/openid-connect/token
    #    refreshUrl: some_refresh_url
  
    server.forward-headers-strategy: framework
  
    spring:
      application:
        name: composite
      cloud:
        stream:
          bindings:
            companies-out-0:
              destination: companies
              producer:
                required-groups: auditGroup
            resumes-out-0:
              destination: resumes
              producer:
                required-groups: auditGroup
            jobs-out-0:
              destination: jobs
              producer:
                required-groups: auditGroup
          default-binder: rabbit
  
      security:
        oauth2:
          resourceserver:
            jwt:
              issuer-uri: http://${app.auth-server}:9999/auth/realms/ugk
  
    logging:
      level:
        root: info
        ru.rsh12: debug
  
    resilience4j:
      retry:
        configs:
          shared:
            max-attempts: 3
            wait-duration: 1500
            retry-exceptions:
              - org.springframework.web.reactive.function.client.WebClientResponseException.InternalServerError
        instances:
          company:
            base-config: shared
  
      timelimiter:
        configs:
          shared:
            timeout-duration: 3s
        instances:
          company:
            base-config: shared
  
      circuitbreaker:
        configs:
          shared:
            allow-health-indicator-to-fail: false
            register-health-indicator: true
            sliding-window-type: count_based
            sliding-window-size: 5
            failure-rate-threshold: 50
            wait-duration-in-open-state: 10000
            permitted-number-of-calls-in-half-open-state: 3
            automatic-transition-from-open-to-half-open-enabled: true
            ignore-exceptions:
              - ru.rsh12.api.exceptions.NotFoundException
              - ru.rsh12.api.exceptions.InvalidInputException
        instances:
          company:
            base-config: shared
  
    management:
      health:
        circuitbreakers:
          enabled: true
  
  
    ---
    spring:
      config:
        activate:
          on-profile: docker
  
    server:
      port: 80
  gateway.yml: |-
    server:
      port: 8443
      ssl:
        key-store-type: PKCS12
        key-store: classpath:keystore/edge.p12
        key-store-password: password
        key-alias: localhost
  
    spring:
      sleuth:
        reactor:
          instrumentation-type: decorate_on_last # enable Sleuth to track trace IDs correctly
  
      cloud:
        gateway:
          routes:
            - id: composite
              uri: http://composite
              predicates:
                - Path=/api/v1/composite/**
  
            - id: auth-server
              uri: http://${app.auth-server}:9999
              predicates:
                - Path=/oauth2/{segment}
              filters:
                - SetPath=/auth/realms/ugk/protocol/openid-connect/{segment}
  
            - id: config-server
              uri: ${spring.cloud.config.uri}
              predicates:
                - Path=/config/**
              filters:
                - RewritePath=/config(?<segment>/?.*), $\{segment}
  
            - id: composite-swagger-ui
              uri: http://composite
              predicates:
                - Path=/openapi/**
  
            - id: composite-swagger-ui-webjars
              uri: http://composite
              predicates:
                - Path=/webjars/**
  
      security:
        oauth2:
          resourceserver:
            jwt:
              issuer-uri: http://${app.auth-server}:9999/auth/realms/ugk
  
    logging:
      level:
        root: info
        org.springframework.cloud.gateway.route.RouteDefinitionRouteLocator: info
        org.springframework.cloud.gateway: trace
        org.springframework.web.server.adapter.HttpWebHandlerAdapter: trace
  job.yml: |-
    server:
      port: 7003
      error:
        include-message: always
  
    spring:
      datasource:
        url: jdbc:postgresql://localhost/job
        username: ${DB_USERNAME:postgres}
        password: ${DB_PWD:postgres}
        hikari:
          initialization-fail-timeout: 60000
      data:
        web:
          pageable:
            max-page-size: 500
      cloud:
        function:
          definition: jobPostMessageProcessor
        stream:
          default-binder: rabbit
          bindings:
            jobPostMessageProcessor-in-0:
              destination: jobs
              group: jobsGroup
              consumer:
                max-attempts: 3
                back-off-initial-interval: 500
                back-off-max-interval: 1000
                back-off-multiplier: 2.0
          rabbit:
            bindings:
              jobPostMessageProcessor-in-0:
                consumer:
                  auto-bind-dlq: true
                  republish-to-dlq: true
  
    logging:
      level:
        root: info
        ru.rsh12: debug
        org.hibernate.SQL: debug
        org.hibernate.type.descriptor.sql.BasicBinder: trace
  
  
    ---
    spring:
      datasource:
        url: jdbc:postgresql://postgres/job
      config:
        activate:
          on-profile: docker
  
    server:
      port: 80
  resume.yml: |
    server:
      port: 7002
      error:
        include-message: always
  
    spring:
      datasource:
        url: jdbc:postgresql://localhost/resume
        username: ${DB_USERNAME:postgres}
        password: ${DB_PWD:postgres}
        hikari:
          initialization-fail-timeout: 60000
      cloud:
        function:
          definition: resumeMessageProcessor
        stream:
          default-binder: rabbit
          bindings:
            resumeMessageProcessor-in-0:
              destination: resumes
              group: resumesGroup
              consumer:
                max-attempts: 3
                back-off-initial-interval: 500
                back-off-max-interval: 1000
                back-off-multiplier: 2.0
          rabbit:
            bindings:
              resumeMessageProcessor-in-0:
                consumer:
                  auto-bind-dlq: true
                  republish-to-dlq: true
  
    logging:
      level:
        root: info
        ru.rsh12: debug
        org.hibernate.SQL: debug
        org.hibernate.type.descriptor.sql.BasicBinder: trace
  
  
    ---
    spring:
      datasource:
        url: jdbc:postgresql://postgres/resume
      config:
        activate:
          on-profile: docker
  
    server:
      port: 80
