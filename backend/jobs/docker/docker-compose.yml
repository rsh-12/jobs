version: '3.8'

networks:
  backend:
    driver: bridge

services:

  ### BEGIN auth-server
  db:
    image: postgres:14-alpine
    deploy:
      resources:
        limits:
          memory: 512M
    volumes:
      - ./datastore/keycloak:/var/lib/postgresql/data/pgdata
    networks:
      - backend
    environment:
      POSTGRES_DB: ${POSTGRES_DB_K}
      POSTGRES_USER: ${POSTGRES_USER_K}
      POSTGRES_PASSWORD: ${POSTGRES_PWD_K}
      PGDATA: /var/lib/postgresql/data/pgdata

  keycloak:
    image: jboss/keycloak
    deploy:
      resources:
        limits:
          memory: 1024M
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: db
      DB_DATABASE: keycloak
      DB_USER: ${POSTGRES_USER_K}
      DB_SCHEMA: public
      DB_PASSWORD: ${POSTGRES_PWD_K}
      KEYCLOAK_USER: ${KEYCLOAK_USER}
      KEYCLOAK_PASSWORD: ${KEYCLOAK_PWD}
    command:
      - "-Djboss.http.port=9999"
      - "-b 0.0.0.0"
    ports:
      - "9999:9999"
    networks:
      backend:
        aliases:
          - "keycloak"
    depends_on:
      postgres:
        condition: service_started
  ### END auth-server

  job:
    build: ../microservices/job-service
    deploy:
      resources:
        limits:
          memory: 512M
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    networks:
      - backend
    depends_on:
      rabbitmq:
        condition: service_started
      postgres:
        condition: service_started

  resume:
    build: ../microservices/resume-service
    deploy:
      resources:
        limits:
          memory: 512M
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    networks:
      - backend
    depends_on:
      rabbitmq:
        condition: service_started
      postgres:
        condition: service_started

  company:
    build: ../microservices/company-service
    deploy:
      resources:
        limits:
          memory: 512M
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    networks:
      - backend
    depends_on:
      rabbitmq:
        condition: service_started
      postgres:
        condition: service_started

  composite:
    build: ../microservices/composite-service
    deploy:
      resources:
        limits:
          memory: 512M
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    networks:
      - backend
    depends_on:
      rabbitmq:
        condition: service_started

  rabbitmq:
    image: rabbitmq:3.8.11-management-alpine
    deploy:
      resources:
        limits:
          memory: 512M
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_PWD}
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 60

  postgres:
    image: postgres:14-alpine
    deploy:
      resources:
        limits:
          memory: 512M
    volumes:
      - ./datastore/pg_data_local:/var/lib/postgresql/data/pgdata
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PWD}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    networks:
      - backend
    restart: on-failure

  eureka:
    build: ../spring-cloud/eureka-server
    deploy:
      resources:
        limits:
          memory: 512M
    networks:
      - backend
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}

  config-server:
    build: ../spring-cloud/config-server
    deploy:
      resources:
        limits:
          memory: 512M
    networks:
      - backend
    environment:
      - SPRING_PROFILES_ACTIVE=docker,native
      - ENCRYPT_KEY=${CONFIG_SERVER_ENCRYPT_KEY}
      - SPRING_SECURITY_USER_NAME=${CONFIG_SERVER_USR}
      - SPRING_SECURITY_USER_PASSWORD=${CONFIG_SERVER_PWD}
    volumes:
      - $PWD/../config-repo:/config-repo

  gateway:
    build: ../spring-cloud/gateway
    deploy:
      resources:
        limits:
          memory: 512M
    networks:
      backend:
        aliases:
          - "gateway"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - CONFIG_SERVER_USR=${CONFIG_SERVER_USR}
      - CONFIG_SERVER_PWD=${CONFIG_SERVER_PWD}
    ports:
      - "8443:8443"